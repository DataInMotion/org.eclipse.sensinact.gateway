<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2017 CEA.
  ~ All rights reserved. This program and the accompanying materials
  ~ are made available under the terms of the Eclipse Public License v1.0
  ~ which accompanies this distribution, and is available at
  ~ http://www.eclipse.org/legal/epl-v10.html
  ~
  ~ Contributors:
  ~    CEA - initial API and implementation
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.eclipse.sensinact.gateway.distribution</groupId>
        <artifactId>profile</artifactId>
        <version>2.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>json-path</artifactId>
    <packaging>pom</packaging>

    <name>sensiNact IoT Gateway - sensiNact Runtime (${project.artifactId} bridge dependencies)</name>
	
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <inherited>false</inherited>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/sensinact/load/${project.artifactId}</outputDirectory>
                            <excludeArtifactIds>${excludeArtifactId}</excludeArtifactIds>
                            <excludeGroupIds>${excludeGroupId}</excludeGroupIds>
                            <excludeTransitive>${excludeTransitive}</excludeTransitive>
                            <excludeTypes>pom</excludeTypes>
                        </configuration>
                        <inherited>false</inherited>
                    </execution>
                </executions>
            </plugin>            		
	        <plugin>
	          <groupId>org.codehaus.gmaven</groupId>
	          <artifactId>groovy-maven-plugin</artifactId>
	          <executions>
	            <execution>
	              <id>search-dependency</id>	              
	              <phase>generate-resources</phase>
	              <goals>
	                <goal>execute</goal>
	              </goals>
	              <configuration>
	                <defaults>
	                  <name>search-dependency</name>
	                </defaults>
	                <source>	              
			            String basedir = project.basedir.absolutePath.replace('\\','/');  
		                File parent = new File(basedir).getParentFile().getParentFile().getParentFile().getParentFile();
		                		                                
		                File a = new File(parent, "platform/northbound/jsonpath-filtering/json-path/target/json-path-2.4.0.jar");	
		                File b = new File(parent, "platform/northbound/jsonpath-filtering/json-provider-minimal/target/json-provider-minimal-"+properties['project.version']+".jar");
		                File c = new File(parent, "platform/northbound/jsonpath-filtering/jsonpath-filter/target/jsonpath-filter-"+properties['project.version']+".jar");
                            
		                if((!a.exists())||(!b.exists())||(!c.exists()))
		                {	              	
		                	project.getCompileSourceRoots().clear();
		                	project.getTestCompileSourceRoots().clear();
		                	
		                } else
		                {   		                
			                File dir = new File(new File(basedir),'target/sensinact/load/json-path');
			                if(!dir.exists())
			                {
			                	dir.mkdirs();		                	
			                }						             
			                def newFile = new File(dir,'json-path-2.4.0.jar');
						    newFile.createNewFile(); 
	                             
	                        output = newFile.newOutputStream();
							a.newInputStream().eachByte(1024, 
					         {data, lenth -> output.write(data, 0, lenth)});
							output.close();
							
							newFile = new File(dir,'json-provider-minimal-'+properties['project.version']+'.jar');
						    newFile.createNewFile();
							  
	                        output = newFile.newOutputStream();
							b.newInputStream().eachByte(1024, 
					         {data, lenth -> output.write(data, 0, lenth)});
							output.close();
							
							newFile = new File(dir,'jsonpath-filter-'+properties['project.version']+'.jar');
						    newFile.createNewFile();
							  
	                        output = newFile.newOutputStream();
							c.newInputStream().eachByte(1024, 
					         {data, lenth -> output.write(data, 0, lenth)});
							output.close();
		                }
	                </source>
	              </configuration>
	            </execution>
	          </executions>
	        </plugin>
        </plugins>
    </build>
</project>
