/*
 * Copyright (c) 2017 CEA.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html

 * Contributors:
 *    Christophe Munilla - initial API and implementation
 */
PRAGMA foreign_keys=TRUE;
PRAGMA recursive_triggers=TRUE;
PRAGMA automatic_index=TRUE;

DROP TABLE IF EXISTS METHOD; 
CREATE TABLE METHOD (MID  INTEGER PRIMARY KEY AUTOINCREMENT  NOT NULL, MNAME VARCHAR);  

INSERT INTO METHOD VALUES (1, "GET");
INSERT INTO METHOD VALUES (2, "SET");
INSERT INTO METHOD VALUES (3, "ACT");
INSERT INTO METHOD VALUES (4, "SUBSCRIBE");
INSERT INTO METHOD VALUES (5, "UNSUBSCRIBE");
INSERT INTO METHOD VALUES (6, "DESCRIBE");

DROP TABLE IF EXISTS USER_ACCESS; 
CREATE TABLE USER_ACCESS (UAID  INTEGER PRIMARY KEY AUTOINCREMENT  NOT NULL, UANAME VARCHAR, UALEVEL BIGINT); 

INSERT INTO USER_ACCESS VALUES (1, "Unauthorized", 0);
INSERT INTO USER_ACCESS VALUES (2, "Anonymous", 1);
INSERT INTO USER_ACCESS VALUES (3, "Authenticated", 2);
INSERT INTO USER_ACCESS VALUES (4, "Administrator", 3);
INSERT INTO USER_ACCESS VALUES (5, "Owner", 4);

DROP TABLE IF EXISTS OBJECT_ACCESS; 
CREATE TABLE OBJECT_ACCESS (OAID  INTEGER PRIMARY KEY AUTOINCREMENT  NOT NULL, OANAME VARCHAR, OALEVEL BIGINT); 

INSERT INTO OBJECT_ACCESS VALUES (1, "Anonymous", 1);
INSERT INTO OBJECT_ACCESS VALUES (2, "Authenticated", 2);
INSERT INTO OBJECT_ACCESS VALUES (3, "Administrator", 3);
INSERT INTO OBJECT_ACCESS VALUES (4, "Owner", 4);

DROP TABLE IF EXISTS OBJECT_PROFILE; 
CREATE TABLE OBJECT_PROFILE (OPID  INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL, OPNAME VARCHAR NOT NULL);

INSERT INTO OBJECT_PROFILE(OPID, OPNAME) VALUES (1, "DEFAULT");
INSERT INTO OBJECT_PROFILE(OPID, OPNAME) VALUES (2, "ADMIN");
INSERT INTO OBJECT_PROFILE(OPID, OPNAME) VALUES (3, "NO_ANONYMOUS");
INSERT INTO OBJECT_PROFILE(OPID, OPNAME) VALUES (4, "ALL_ANONYMOUS");
INSERT INTO OBJECT_PROFILE(OPID, OPNAME) VALUES (5, "OWNER");

DROP TABLE IF EXISTS OBJECT_PROFILE_ACCESS; 
CREATE TABLE OBJECT_PROFILE_ACCESS(
MID INTEGER NOT NULL, 
OPID INTEGER NOT NULL, 
OAID INTEGER NOT NULL, 
PRIMARY KEY (MID,  OPID,  OAID), 
FOREIGN KEY (MID) REFERENCES METHOD (MID), 
FOREIGN KEY (OPID) REFERENCES OBJECT_PROFILE (OPID), 
FOREIGN KEY (OAID) REFERENCES OBJECT_ACCESS (OAID)) WITHOUT ROWID; 

INSERT INTO OBJECT_PROFILE_ACCESS VALUES (1,1,1); 
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (2,1,2);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (3,1,2);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (4,1,1);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (5,1,1);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (6,1,1);

INSERT INTO OBJECT_PROFILE_ACCESS VALUES (1,2,3); 
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (2,2,3);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (3,2,3);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (4,2,3);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (5,2,3);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (6,2,3);

INSERT INTO OBJECT_PROFILE_ACCESS VALUES (1,3,2); 
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (2,3,2);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (3,3,2);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (4,3,2);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (5,3,2);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (6,3,2);

INSERT INTO OBJECT_PROFILE_ACCESS VALUES (1,4,1); 
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (2,4,1);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (3,4,1);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (4,4,1);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (5,4,1);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (6,4,1);

INSERT INTO OBJECT_PROFILE_ACCESS VALUES (1,5,3); 
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (2,5,4);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (3,5,4);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (4,5,3);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (5,5,3);
INSERT INTO OBJECT_PROFILE_ACCESS VALUES (6,5,3);

DROP TABLE IF EXISTS BUNDLE ; 
CREATE TABLE BUNDLE (
BID  INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL,
SAUTH BYTE NOT NULL DEFAULT 0,
OPID BIGINT NOT NULL DEFAULT 1, 
BNAME VARCHAR NOT NULL, 
BSHA VARCHAR,
FOREIGN KEY (OPID) REFERENCES OBJECT_PROFILE(OPID));

CREATE UNIQUE INDEX 'BUNDLE_PK_INDEX' ON 'BUNDLE' ('BID' ASC);

INSERT INTO BUNDLE VALUES (0, 0, 4, "sensinact-system", "sensinact-system");
INSERT INTO BUNDLE VALUES (1, 0, 4, "application-manager", "application-manager");

DROP TABLE IF EXISTS OBJECT ; 
CREATE TABLE OBJECT (
OID INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL, 
BID BIGINT, 
SAUTH BYTE NOT NULL DEFAULT 0,
OPID BIGINT NOT NULL DEFAULT 1, 
NAME VARCHAR NOT NULL,
PATTERN BYTE NOT NULL DEFAULT 0,
PATH VARCHAR,
PARENT BIGINT,  
FOREIGN KEY (BID) REFERENCES BUNDLE(BID),
FOREIGN KEY (OPID) REFERENCES OBJECT_PROFILE(OPID));

CREATE UNIQUE INDEX 'OBJECT_PK_INDEX' ON 'OBJECT' ('OID' ASC);
CREATE INDEX 'OBJECT_PARENT_INDEX' ON 'OBJECT' ('PARENT' ASC);
CREATE UNIQUE INDEX 'OBJECT_NAME_AND_PARENT_INDEX' ON 'OBJECT' ('NAME','PARENT');

DROP TABLE IF EXISTS APPLICATION ; 
CREATE TABLE APPLICATION (
APPID INTEGER PRIMARY KEY AUTOINCREMENT  NOT NULL, 
OID BIGINT NOT NULL,
APP_PRIVATE_KEY VARCHAR NOT NULL,
APP_PUBLIC_KEY VARCHAR NOT NULL,
FOREIGN KEY (OID) REFERENCES OBJECT(OID));

CREATE UNIQUE INDEX 'APPLICATION_PK_INDEX' ON 'APPLICATION' ('APPID' ASC);
CREATE UNIQUE INDEX 'APPLICATION_PUBLIC_KEY_INDEX' ON 'APPLICATION' ('APP_PUBLIC_KEY' ASC);
CREATE UNIQUE INDEX 'APPLICATION_PRIVATE_KEY_INDEX' ON 'APPLICATION' ('APP_PRIVATE_KEY' ASC);
CREATE INDEX 'APPLICATION_OBJECT_INDEX' ON 'APPLICATION' ('OID');

DROP TABLE IF EXISTS AGENT ; 
CREATE TABLE AGENT (
AID  INTEGER PRIMARY KEY  AUTOINCREMENT  NOT NULL,
BID BIGINT NOT NULL,
APUBLIC_KEY VARCHAR NOT NULL,
FOREIGN KEY (BID) REFERENCES BUNDLE(BID));  

CREATE UNIQUE INDEX 'AGENT_PK_INDEX' ON 'AGENT' ('AID' ASC);
CREATE UNIQUE INDEX 'AGENT_PUBLICKEY_INDEX' ON 'AGENT' ('APUBLIC_KEY' ASC);

-- system:agent + machine time
INSERT INTO AGENT VALUES(0, 0,"59aa55b1dc5335fd8c02ede268cfca152ab64e09");

DROP TABLE IF EXISTS SNAUSER ; 
CREATE TABLE SNAUSER (SUID   INTEGER PRIMARY KEY AUTOINCREMENT  NOT NULL,
SULOGIN VARCHAR NOT NULL, SUPASSWORD VARCHAR NOT NULL, SUACCOUNT VARCHAR, SUACCOUNTTYPE VARCHAR, 
SUPUBLIC_KEY VARCHAR NOT NULL );  

CREATE UNIQUE INDEX 'USER_PK_INDEX' ON 'SNAUSER' ('SUID' ASC);
CREATE UNIQUE INDEX 'USER_PUBLICKEY_INDEX' ON 'SNAUSER' ('SUPUBLIC_KEY' ASC);

--passwd : anonymous
INSERT INTO SNAUSER VALUES (0, "ANONYMOUS",  "294de3557d9d0b3d2d8a1e6aab028cf", "anonymous", null, "anonymous");

DROP TABLE IF EXISTS AUTHENTICATED ; 
CREATE TABLE AUTHENTICATED (
PUBLIC_KEY BIGINT NOT NULL, 
OID BIGINT NOT NULL, 
UAID BIGINT NOT NULL, 
PRIMARY KEY (PUBLIC_KEY,  OID),
FOREIGN KEY (OID) REFERENCES OBJECT (OID),
FOREIGN KEY (UAID) REFERENCES USER_ACCESS (UAID));  

CREATE TRIGGER ANONYMOUS_ACCESS_TRIGGER AFTER INSERT
ON OBJECT
BEGIN 
 INSERT INTO AUTHENTICATED (PUBLIC_KEY, OID, UAID) VALUES ("anonymous",new.OID, 2);
END;

-- USER ACCESS LEVEL BY OBJECT FOR EACH POSSIBLE USER (SNAUSER/AGENT/APPLICATION)
DROP VIEW IF EXISTS AUTHENTICATED_ACCESS_LEVEL ; 
CREATE VIEW AUTHENTICATED_ACCESS_LEVEL AS
SELECT AUTHENTICATED.OID AS UOID, AUTHENTICATED.PUBLIC_KEY AS PUBLIC_KEY, SNAUSER.SUID AS UID, 
USER_ACCESS.UAID AS UAID, USER_ACCESS.UALEVEL AS UALEVEL
FROM OBJECT, SNAUSER, AUTHENTICATED, USER_ACCESS
WHERE AUTHENTICATED.PUBLIC_KEY=SNAUSER.SUPUBLIC_KEY 
AND AUTHENTICATED.OID = OBJECT.OID
AND USER_ACCESS.UAID=AUTHENTICATED.UAID 
UNION ALL
SELECT AUTHENTICATED.OID AS UOID, AUTHENTICATED.PUBLIC_KEY AS PUBLIC_KEY, AGENT.AID AS UID, 
USER_ACCESS.UAID AS UAID, USER_ACCESS.UALEVEL AS UALEVEL
FROM OBJECT, AGENT, AUTHENTICATED, USER_ACCESS
WHERE AUTHENTICATED.PUBLIC_KEY=AGENT.APUBLIC_KEY
AND AUTHENTICATED.OID = OBJECT.OID
AND USER_ACCESS.UAID=AUTHENTICATED.UAID
UNION ALL
SELECT AUTHENTICATED.OID AS UOID, AUTHENTICATED.PUBLIC_KEY AS PUBLIC_KEY, APPLICATION.APPID AS UID,
USER_ACCESS.UAID AS UAID, USER_ACCESS.UALEVEL AS UALEVEL
FROM OBJECT, APPLICATION, AUTHENTICATED, USER_ACCESS
WHERE AUTHENTICATED.PUBLIC_KEY=APPLICATION.APP_PUBLIC_KEY
AND AUTHENTICATED.OID = OBJECT.OID
AND USER_ACCESS.UAID=AUTHENTICATED.UAID 
UNION ALL
SELECT OBJECT.OID AS UOID, SNAUSER.SUPUBLIC_KEY AS PUBLIC_KEY, SNAUSER.SUID AS UID,
CASE WHEN OBJECT.SAUTH = 1 THEN 3 ELSE 2 END AS UAID,
CASE WHEN OBJECT.SAUTH = 1 THEN 2 ELSE 1 END AS UALEVEL
FROM OBJECT, SNAUSER
WHERE 
(SELECT COUNT(AUTHENTICATED.OID) FROM AUTHENTICATED 
 WHERE AUTHENTICATED.OID = UOID 
AND AUTHENTICATED.PUBLIC_KEY = PUBLIC_KEY) = 0
AND SNAUSER.SUID != 0;

INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (0, NULL, 0, 1, "/", 0, NULL);         -- ROOT
INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (1, 1, 0, 2, "AppManager", 0, 0);   -- APPLICATION MANAGER

DROP TRIGGER IF EXISTS OBJECT_SINGLETON_TRIGGER; 
CREATE TRIGGER OBJECT_SINGLETON_TRIGGER
BEFORE INSERT ON OBJECT
FOR EACH ROW
BEGIN
    SELECT RAISE(ABORT, 'Object must be unique according to the {name - parent} pair key ')
    WHERE EXISTS (SELECT 1 FROM OBJECT     
    WHERE NEW.NAME = OBJECT.NAME 
    AND NEW.PARENT = OBJECT.PARENT);
END;

DROP TRIGGER IF EXISTS OBJECT_PARENT_TRIGGER; 
CREATE TRIGGER OBJECT_PARENT_TRIGGER
BEFORE INSERT ON OBJECT
FOR EACH ROW
WHEN NEW.PARENT IS NULL
BEGIN
    SELECT RAISE(ABORT, 'Parent object required');
END;

DROP TRIGGER IF EXISTS OBJECT_PATH_TRIGGER; 
CREATE TRIGGER OBJECT_PATH_TRIGGER AFTER INSERT
ON OBJECT
FOR EACH ROW
BEGIN 
 UPDATE OBJECT SET PATH = (SELECT PATH FROM 
(SELECT OBJECT.OID, OBJECT.BID , OBJECT.SAUTH , OBJECT.OPID , 
OBJECT.NAME ,OBJECT.PATTERN , OBJECT.PARENT,
substr(group_concat(NESTED.PATH_ELEMENT,'/'),2) as PATH
FROM OBJECT,
(
  WITH RECURSIVE child_object(FIRST, OID, PATH_ELEMENT, PARENT) AS
  ( 
    SELECT OID AS FIRST, OID, NAME AS PATH_ELEMENT, PARENT 
	FROM OBJECT
    UNION ALL
    SELECT child_object.FIRST, parent_object.OID, 
    parent_object.NAME as PATH_ELEMENT, parent_object.PARENT
    FROM child_object, OBJECT parent_object
    WHERE parent_object.OID = child_object.PARENT
  )
  SELECT child_object.FIRST, child_object.OID, child_object.PATH_ELEMENT
  FROM child_object
  ORDER BY child_object.OID ASC 
) AS NESTED
WHERE OBJECT.OID=NESTED.FIRST
AND OBJECT.OID = NEW.OID
GROUP BY NESTED.FIRST)
) WHERE  OBJECT.OID = NEW.OID;
END;

DROP TRIGGER IF EXISTS NAME_OBJECT_UPDATE_TRIGGER; 
CREATE TRIGGER NAME_OBJECT_UPDATE_TRIGGER AFTER UPDATE
OF NAME ON OBJECT
FOR EACH ROW
BEGIN 
 UPDATE OBJECT SET PATH = (SELECT PATH FROM 
(SELECT OBJECT.OID, OBJECT.BID , OBJECT.SAUTH , OBJECT.OPID , 
OBJECT.NAME ,OBJECT.PATTERN , OBJECT.PARENT,
substr(group_concat(NESTED.PATH_ELEMENT,'/'),2) as PATH
FROM OBJECT,
(
  WITH RECURSIVE child_object(FIRST, OID, PATH_ELEMENT, PARENT) AS
  ( 
    SELECT OID AS FIRST, OID, NAME AS PATH_ELEMENT, PARENT 
	FROM OBJECT
    UNION ALL
    SELECT child_object.FIRST, parent_object.OID, 
    parent_object.NAME as PATH_ELEMENT, parent_object.PARENT
    FROM child_object, OBJECT parent_object
    WHERE parent_object.OID = child_object.PARENT
  )
  SELECT child_object.FIRST, child_object.OID, child_object.PATH_ELEMENT
  FROM child_object
  ORDER BY child_object.OID ASC 
) AS NESTED
WHERE OBJECT.OID=NESTED.FIRST
AND OBJECT.OID = NEW.OID
GROUP BY NESTED.FIRST)
) WHERE  OBJECT.OID = NEW.OID;
END;

DROP TRIGGER IF EXISTS OBJECT_DELETION_TRIGGER; 
CREATE TRIGGER OBJECT_DELETION_TRIGGER AFTER DELETE 
ON OBJECT 
FOR EACH ROW 
BEGIN 
	DELETE FROM AUTHENTICATED WHERE AUTHENTICATED.OID IN (
	WITH RECURSIVE ALL_OBJECTS (OID) AS
	(
		SELECT OLD.OID 
		UNION ALL
		SELECT OBJECT.OID FROM OBJECT, ALL_OBJECTS
		WHERE OBJECT.PARENT = ALL_OBJECTS.OID
	) SELECT OID FROM ALL_OBJECTS
	);
	DELETE FROM APPLICATION WHERE APPLICATION.OID IN (
	WITH RECURSIVE ALL_OBJECTS (OID) AS
	(
		SELECT OLD.OID 
		UNION ALL
		SELECT OBJECT.OID FROM OBJECT, ALL_OBJECTS
		WHERE OBJECT.PARENT = ALL_OBJECTS.OID
	) SELECT OID FROM ALL_OBJECTS
	);
	DELETE FROM OBJECT WHERE 
	OID IN (
	WITH RECURSIVE ALL_OBJECTS (OID) AS
	(
		SELECT OLD.OID 
		UNION ALL
		SELECT OBJECT.OID FROM OBJECT, ALL_OBJECTS
		WHERE OBJECT.PARENT = ALL_OBJECTS.OID
	) SELECT OID FROM ALL_OBJECTS
	);
END;

DROP TRIGGER IF EXISTS BUNDLE_DELETION_TRIGGER; 
CREATE TRIGGER BUNDLE_DELETION_TRIGGER AFTER DELETE
ON BUNDLE
FOR EACH ROW
BEGIN 	
	DELETE FROM AUTHENTICATED WHERE AUTHENTICATED.OID IN (
	WITH RECURSIVE ALL_OBJECTS (OID) AS
	(
		SELECT OBJECT.OID FROM OBJECT WHERE OBJECT.BID = OLD.BID 
		UNION ALL
		SELECT OBJECT.OID FROM OBJECT, ALL_OBJECTS
		WHERE OBJECT.PARENT = ALL_OBJECTS.OID
	) SELECT OID FROM ALL_OBJECTS
	);
	DELETE FROM APPLICATION WHERE APPLICATION.OID IN (
	WITH RECURSIVE ALL_OBJECTS (OID) AS
	(
		SELECT OBJECT.OID FROM OBJECT WHERE OBJECT.BID = OLD.BID 
		UNION ALL
		SELECT OBJECT.OID FROM OBJECT, ALL_OBJECTS
		WHERE OBJECT.PARENT = ALL_OBJECTS.OID
	) SELECT OID FROM ALL_OBJECTS
	);
	DELETE FROM AGENT WHERE AGENT.BID = OLD.BID;
	DELETE FROM OBJECT WHERE 
	OID IN (
	WITH RECURSIVE ALL_OBJECTS (OID) AS
	(
		SELECT OBJECT.OID FROM OBJECT WHERE OBJECT.BID = OLD.BID 
		UNION ALL
		SELECT OBJECT.OID FROM OBJECT, ALL_OBJECTS
		WHERE OBJECT.PARENT = ALL_OBJECTS.OID
	) SELECT OID FROM ALL_OBJECTS
	);
END;

DROP TRIGGER IF EXISTS USER_DELETION_TRIGGER; 
CREATE TRIGGER USER_DELETION_TRIGGER AFTER DELETE
ON SNAUSER
FOR EACH ROW
BEGIN 
 DELETE FROM AUTHENTICATED WHERE PUBLIC_KEY = OLD.SUPUBLIC_KEY;
END;

DROP TRIGGER IF EXISTS AGENT_DELETION_TRIGGER; 
CREATE TRIGGER AGENT_DELETION_TRIGGER AFTER DELETE 
ON AGENT 
FOR EACH ROW 
BEGIN 
	DELETE FROM AUTHENTICATED WHERE PUBLIC_KEY = OLD.APUBLIC_KEY; 
END;

DROP TRIGGER IF EXISTS APPLICATION_DELETION_TRIGGER; 
CREATE TRIGGER APPLICATION_DELETION_TRIGGER AFTER DELETE 
ON APPLICATION 
FOR EACH ROW 
BEGIN 
	DELETE FROM AUTHENTICATED WHERE PUBLIC_KEY = OLD.APP_PUBLIC_KEY; 
END;

---------------------------------------------------------------------------
--                             TEST ENTRIES                              --
---------------------------------------------------------------------------

-- psswd : "sensiNact_team" / pk : cea:christophe.munilla@cea.fr + machine time
INSERT INTO SNAUSER VALUES (NULL, "cea",  "ac0dad7d2c39119f9d7d76d34303ec85",
"christophe.munilla@cea.fr","MAIL", "73c5f1a1e7b4a75c2b5fabafca2cf51e6b0e7426");
-- psswd : "fake" / pk : fake:fake@cea.fr + machine time
INSERT INTO SNAUSER VALUES (NULL, "fake", "144c9defac04969c7bfad8efaa8ea194",
"fake@cea.fr", "MAIL", "f92fe92b61e018be14a88ab84f2859c35d832316");
-- psswd : "fake2" / pk : fake2:fake2@cea.fr + machine time
INSERT INTO SNAUSER VALUES (NULL, "fake2","503f7fada600da935e2851a1c7326084",
"fake2@cea.fr", "MAIL", "31e63e9c4a319bf313b8a6d454798e09b3e7344a"); 

INSERT INTO BUNDLE VALUES (2, 0, 1, "fan", "fan");
INSERT INTO BUNDLE VALUES (3, 0, 1, "slider", "slider");
INSERT INTO BUNDLE VALUES (4, 0, 1, "light", "light");
INSERT INTO BUNDLE VALUES (5, 0, 1, "billboard", "bilboard");
INSERT INTO BUNDLE VALUES (6, 1, 1, "button", "button");
INSERT INTO BUNDLE VALUES (7, 1, 1, "temperatures-generator", "temperatures-generator");

INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (2, 3, 0, 1, "slider", 0, 0);   -- Anonymous / DEFAULT
INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (3, 3, 0, 1, "[^/]+", 1, 2);    -- Anonymous / DEFAULT
INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (4, 3, 1, 1, "location", 0, 3); -- Authenticated / DEFAULT
INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (5, 3, 0, 1, "cursor", 0, 2);   -- Anonymous / DEFAULT
INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (6, 3, 0, 1, "position", 0, 5); -- Anonymous / DEFAULT
INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (7, 2, 0, 3, "fan", 0, 0);      -- Anonymous / ADMIN
INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (8, 2, 0, 3, "[^/]+", 1, 7);    -- Anonymous / ADMIN
INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (9, 2, 1, 3, "location", 0, 8); -- Authenticated / ADMIN
INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (10, 5, 0, 5, "billboard", 0, 0);-- Anonymous / OWNER

-- cea user
INSERT INTO AUTHENTICATED VALUES ("73c5f1a1e7b4a75c2b5fabafca2cf51e6b0e7426",2,2);
INSERT INTO AUTHENTICATED VALUES ("73c5f1a1e7b4a75c2b5fabafca2cf51e6b0e7426",7,4);
-- fake user
INSERT INTO AUTHENTICATED VALUES ("f92fe92b61e018be14a88ab84f2859c35d832316",2,2);
INSERT INTO AUTHENTICATED VALUES ("f92fe92b61e018be14a88ab84f2859c35d832316",7,3);
-- fake2 user
INSERT INTO AUTHENTICATED VALUES ("31e63e9c4a319bf313b8a6d454798e09b3e7344a",2,2);
INSERT INTO AUTHENTICATED VALUES ("31e63e9c4a319bf313b8a6d454798e09b3e7344a",8,5);

-- TEST PATTERN DEFINITION
-- THE NAME OF SERVICE PROVIDERS BELOW COMPLIES WITH TWO DISTINCT PATTERNS  
INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (11, 3, 0, 3, "slider[0-9]{2}", 1, 0);   
INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (12, 3, 0, 2, "admin", 1, 11);

INSERT INTO AUTHENTICATED VALUES ("73c5f1a1e7b4a75c2b5fabafca2cf51e6b0e7426",11,4);

INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (13, 3, 0, 3, "slider0[0-9]", 1, 0);

INSERT INTO AUTHENTICATED VALUES ("f92fe92b61e018be14a88ab84f2859c35d832316",13,3);

INSERT INTO OBJECT(OID, BID, SAUTH, OPID, NAME, PATTERN, PARENT) 
VALUES (14, 3, 0, 3, "slider1[0-9]", 1, 0);

INSERT INTO AUTHENTICATED VALUES ("31e63e9c4a319bf313b8a6d454798e09b3e7344a",14,3);
